public keyWatcher(){
    var oldKey = null;
    var holdKeySent; //flag
    var shiftState = 0;
    var holdWaitCount = 0; //TODO implement this where if a press is shorter then this it is normal else it is a hold 
    every(x)miliseconds Do {
        var pressedKey = firmwareCommandQueue(see pressed key);
        switch(pressedKey){
             case null:
                if(oldKey != null && !holdKeySent){ // the oldKey is not null and no hold commands where sent out
                    if(oldKey == "A"){ //need to take care of shift here due to here being where non-holds are accounted for
                        shiftState = shiftState+1;
                        if(shiftState >= 3){
                            shiftState = 0;
                        }
                    }else{
                        modeFlow(oldKey + shiftState);
                        shiftState = 0;
                    }
                }//end not after hold check
                holdKeySent = false;
                oldKey = null;
                break;
            case oldKey:
                //TODO add a way to increase how long you need to hold for a hold command

                if(pressedKey == null){
                    break;
                }
                if(!holdKeySent){
                    holdKeySent = true;
                    modeFlow(pressedKey + shiftState + hold);
                    shiftState = 0;
                } //send out hold key only the one time
                break;
            default:
                oldKey = pressedKey;
                break;
        }
    }
}

public sendSpeakerOutput(text){
    var formatedCommand = formatToSpeakerOutput(text);
    firmwareCommandQueue(formatedCommand)
}

//the gates are just mutexes and stuff
private firmwareCommandQueue(command){
    Gate1;
    LockGate1;
    Firmware.sendCommand(command);
    wait till reply
    var reply = Firmware.reply();
    unlockGate1;
    return reply;
}